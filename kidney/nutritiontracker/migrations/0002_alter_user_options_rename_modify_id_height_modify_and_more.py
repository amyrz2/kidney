# Generated by Django 4.1.2 on 2022-12-02 03:22

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('nutritiontracker', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='user',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.RenameField(
            model_name='height',
            old_name='modify_id',
            new_name='modify',
        ),
        migrations.RenameField(
            model_name='item',
            old_name='measurement_type_id',
            new_name='measurement_type',
        ),
        migrations.RenameField(
            model_name='journal_entry',
            old_name='patient_id',
            new_name='patient',
        ),
        migrations.RenameField(
            model_name='journal_line_item',
            old_name='entry_id',
            new_name='entry',
        ),
        migrations.RenameField(
            model_name='journal_line_item',
            old_name='item_id',
            new_name='item',
        ),
        migrations.RenameField(
            model_name='journal_line_item',
            old_name='type_id',
            new_name='type',
        ),
        migrations.RenameField(
            model_name='modify_info_entry',
            old_name='patient_id',
            new_name='patient',
        ),
        migrations.RenameField(
            model_name='morbidity_stage',
            old_name='morbidity_id',
            new_name='morbidity',
        ),
        migrations.RenameField(
            model_name='morbidity_stage',
            old_name='stage_id',
            new_name='stage',
        ),
        migrations.RenameField(
            model_name='patient',
            old_name='doctor_id',
            new_name='doctor',
        ),
        migrations.RenameField(
            model_name='patient',
            old_name='partner_id',
            new_name='partner',
        ),
        migrations.RenameField(
            model_name='weight',
            old_name='modify_id',
            new_name='modify',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_email',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_first_name',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_gender',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_last_name',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_password',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_phone',
        ),
        migrations.AddField(
            model_name='item',
            name='phosophorus',
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='potassium',
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='protein',
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='sodium',
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='water',
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name='modify_info_entry',
            name='morbidity_stage',
            field=models.ManyToManyField(blank=True, to='nutritiontracker.morbidity_stage'),
        ),
        migrations.AddField(
            model_name='patient',
            name='user_gender',
            field=models.CharField(max_length=1, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='birthday',
            field=models.DateField(null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='user',
            name='email',
            field=models.EmailField(max_length=254, null=True, unique=True, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='user',
            name='gender',
            field=models.CharField(max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='user',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='user',
            name='password',
            field=models.CharField(default='', max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='user',
            name='phone',
            field=models.IntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='username',
            field=models.CharField(default='', error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
            preserve_default=False,
        ),
        migrations.AlterModelTable(
            name='user',
            table=None,
        ),
        migrations.DeleteModel(
            name='Diagnosis',
        ),
    ]
